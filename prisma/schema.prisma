generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @unique @default(uuid())
  name         String
  email        String        @unique
  password     String?
  avatar       String?
  comments     Comment[]
  commentVotes CommentVote[]
  joined_at    DateTime      @default(now())
  Vote         Vote[]
}

model Topic {
  id     String @id @unique @default(uuid())
  name   String @unique
  // description String
  postid String
  post   Post   @relation(fields: [postid], references: [id])
  // hashtags    String
  // hashtag     Hashtag  @relation(fields: [hashtags], references: [name])
}

model Hashtag {
  id   String @id @unique @default(uuid())
  name String @unique
  // topics Topic[]
}

model Post {
  id       String @id @unique @default(uuid())
  title    String
  content  String
  authorId String

  topics     Topic[]
  created_at DateTime  @default(now())
  comments   Comment[]
  votes       Vote[]
}

model Comment {
  id       String @id @unique @default(uuid())
  content  String
  authorId String
  postId   String

  author      User          @relation(fields: [authorId], references: [id])
  post        Post          @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replyToId   String?
  replyTo     Comment?      @relation("ReplyTo", fields: [replyToId], references: [id])
  replies     Comment[]     @relation("ReplyTo")
  commentVote CommentVote[]
  commentId   String?
}

model CommentVote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  type      VoteType

  @@id([userId, commentId])
}

model Vote {
  user   User     @relation(fields: [userId], references: [id])
  userId String   @unique
  post   Post     @relation(fields: [postId], references: [id])
  postId String
  type   VoteType

  @@id([userId, postId])
}

enum VoteType {
  UP
  DOWN
}
